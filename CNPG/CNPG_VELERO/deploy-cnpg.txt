#!/bin/bash
# Script to install CNPG operator and deploy a PostgreSQL cluster in the sandbox environment

# Exit on error
set -e

# Variables
NAMESPACE="cnpg-system"
HELM_RELEASE="cnpg"
CLUSTER_NAME="test-cluster"
S3_ENDPOINT="http://minio:9000"
S3_BUCKET="cnpg-backups"
S3_ACCESS_KEY="minioadmin"
S3_SECRET_KEY="minioadmin"

# Install Helm if not present
if ! command -v helm &> /dev/null; then
    echo "Installing Helm..."
    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    chmod +x get_helm.sh
    ./get_helm.sh
    rm get_helm.sh
fi

# Add CNPG Helm repository
echo "Adding CNPG Helm repository..."
helm repo add cnpg https://cloudnative-pg.github.io/charts
helm repo update

# Install CNPG operator
echo "Installing CNPG operator..."
helm install ${HELM_RELEASE} cnpg/cloudnative-pg --namespace ${NAMESPACE} --version 0.21.5

# Wait for CNPG operator to be ready
echo "Waiting for CNPG operator to be ready..."
kubectl wait --namespace ${NAMESPACE} --for=condition=Available deployment/cnpg-controller-manager --timeout=300s

# Deploy MinIO for S3-compatible storage (mock)
echo "Deploying MinIO for backup storage..."
kubectl apply -n ${NAMESPACE} -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  labels:
    app: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - name: minio
        image: minio/minio:latest
        args:
        - server
        - /data
        - --console-address=:9090
        env:
        - name: MINIO_ROOT_USER
          value: "${S3_ACCESS_KEY}"
        - name: MINIO_ROOT_PASSWORD
          value: "${S3_SECRET_KEY}"
        ports:
        - containerPort: 9000
        - containerPort: 9090
        volumeMounts:
        - name: data
          mountPath: /data
      volumes:
      - name: data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: minio
spec:
  ports:
  - port: 9000
    targetPort: 9000
    protocol: TCP
    name: api
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: console
  selector:
    app: minio
EOF

# Create MinIO bucket
echo "Creating MinIO bucket..."
kubectl run minio-client --rm -i --tty --namespace ${NAMESPACE} --image=minio/mc --restart=Never --command -- /bin/sh -c "mc alias set minio ${S3_ENDPOINT} ${S3_ACCESS_KEY} ${S3_SECRET_KEY} --api S3v4 && mc mb minio/${S3_BUCKET}"

# Deploy CNPG PostgreSQL cluster
echo "Deploying CNPG PostgreSQL cluster..."
cat <<EOF | kubectl apply -n ${NAMESPACE} -f -
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: ${CLUSTER_NAME}
spec:
  instances: 3
  imageName: ghcr.io/cloudnative-pg/postgres:15
  storage:
    storageClass: standard
    size: 10Gi
  bootstrap:
    initdb:
      database: appdb
      owner: appuser
      secret:
        name: appuser-secret
  superuserSecret:
    name: superuser-secret
  enableSuperuserAccess: true
  replicationSlots:
    highAvailability:
      enabled: true
  backup:
    barmanObjectStore:
      destinationPath: s3://${S3_BUCKET}/
      endpointURL: ${S3_ENDPOINT}
      s3Credentials:
        accessKeyId:
          name: minio-credentials
          key: access-key
        secretAccessKey:
          name: minio-credentials
          key: secret-key
    retentionPolicy: "30d"
  wal:
    storage:
      storageClass: standard
      size: 10Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: appuser-secret
type: kubernetes.io/basic-auth
stringData:
  username: appuser
  password: appuserpassword
---
apiVersion: v1
kind: Secret
metadata:
  name: superuser-secret
type: kubernetes.io/basic-auth
stringData:
  username: postgres
  password: postgrespassword
---
apiVersion: v1
kind: Secret
metadata:
  name: minio-credentials
stringData:
  access-key: ${S3_ACCESS_KEY}
  secret-key: ${S3_SECRET_KEY}
EOF

echo "CNPG PostgreSQL cluster deployed."